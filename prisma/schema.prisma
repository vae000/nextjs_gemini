// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型 - 兼容 NextAuth.js
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // 可选，用于 Credentials 登录
  role          Role      @default(USER)
  avatar        String?   // 保持向后兼容
  bio           String?
  posts         Post[]
  comments      Comment[]
  contacts      Contact[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

// NextAuth.js Account 模型
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// NextAuth.js Session 模型
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// NextAuth.js VerificationToken 模型
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// 文章模型
model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  summary   String?
  published Boolean  @default(false)
  slug      String   @unique
  category  String?
  tags      String[]
  readTime  Int?     @default(5)
  views     Int      @default(0)
  likes     Int      @default(0)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   // 更新为 String 类型
  comments  Comment[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

// 评论模型
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   // 更新为 String 类型
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  parentId  Int?     // 用于回复评论
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

// 联系表单模型
model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String   @db.Text
  phone     String?
  company   String?
  status    ContactStatus @default(PENDING)
  isRead    Boolean  @default(false)
  response  String?  @db.Text
  userId    String?  // 可选，如果用户已登录
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

// 联系状态枚举
enum ContactStatus {
  PENDING    // 待处理
  PROCESSING // 处理中
  RESOLVED   // 已解决
  CLOSED     // 已关闭
}

// 用户角色枚举
enum Role {
  USER
  ADMIN
  MODERATOR
}
